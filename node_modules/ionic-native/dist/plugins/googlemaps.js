"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var plugin_1 = require('./plugin');
var Rx_1 = require('rxjs/Rx');
var plugin_2 = require('./plugin');
/**
 * You can listen to these events where appropriate
 */
exports.GoogleMapsEvent = {
    MAP_READY: plugin.google.maps.event.MAP_READY,
    MAP_CLICK: plugin.google.maps.event.MAP_CLICK,
    MAP_LONG_CLICK: plugin.google.maps.event.MAP_LONG_CLICK,
    MY_LOCATION_BUTTON_CLICK: plugin.google.maps.event.MY_LOCATION_BUTTON_CLICK,
    CAMERA_CHANGE: plugin.google.maps.event.CAMERA_CHANGE,
    CAMERA_IDLE: plugin.google.maps.event.CAMERA_IDLE,
    MAP_LOADED: plugin.google.maps.event.MAP_LOADED,
    MAP_WILL_MOVE: plugin.google.maps.event.MAP_WILL_MOVE,
    MAP_CLOSE: plugin.google.maps.event.MAP_CLOSE,
    MARKER_CLICK: plugin.google.maps.event.MARKER_CLICK,
    INFO_CLICK: plugin.google.maps.event.INFO_CLICK,
    MARKER_DRAG: plugin.google.maps.event.MARKER_DRAG,
    MARKER_DRAG_START: plugin.google.maps.event.MARKER_DRAG_START,
    MARKER_DRAG_END: plugin.google.maps.event.MARKER_DRAG_END,
    OVERLAY_CLICK: plugin.google.maps.event.OVERLAY_CLICK
};
/**
 * @name Google Maps
 * @description This plugin uses the native Google Maps SDK
 * @usage
 * ```
 * import {GoogleMaps, GoogleMapsEvent} from 'ionic-native';
 *
 * ...
 *
 * // somewhere in your component
 * let map = new GoogleMaps('elementID');
 *
 * map.on(GoogleMapsEvent.MAP_READY).subscribe(() => console.log("Map is ready!"));
 * ```
 */
var GoogleMap = (function () {
    function GoogleMap(elementId) {
        this._objectInstance = plugin.google.maps.Map.getMap(document.getElementById(elementId));
    }
    /**
     * Checks if a map object has been created.
     * @return {Promise<GoogleMap>} returns a promise that resolves with the Map object (if it exists).
     */
    GoogleMap.isAvailable = function () {
        return;
    };
    GoogleMap.prototype.on = function (event) {
        var _this = this;
        return new Rx_1.Observable(function (observer) {
            _this._objectInstance.on(event, observer.next);
            return function () { return _this._objectInstance.off(event); };
        });
    };
    GoogleMap.prototype.one = function (event) {
        var _this = this;
        return new Promise(function (resolve) { return _this._objectInstance.one(event, resolve); });
    };
    GoogleMap.prototype.setDebuggable = function (isDebuggable) {
    };
    GoogleMap.prototype.setClickable = function (isClickable) {
    };
    /**
     * Get the position of the camera
     */
    GoogleMap.prototype.getCameraPosition = function () {
        return;
    };
    /**
     * Get the location of the user
     */
    GoogleMap.prototype.getMyLocation = function () {
        return;
    };
    /**
     * Get the visible region
     */
    GoogleMap.prototype.getVisibleRegion = function () {
        return;
    };
    GoogleMap.prototype.showDialog = function () {
    };
    GoogleMap.prototype.closeDialog = function () {
    };
    GoogleMap.prototype.getLicenseInfo = function () {
        return;
    };
    GoogleMap.prototype.setCenter = function (latLng) {
    };
    GoogleMap.prototype.setZoom = function (zoomLevel) {
    };
    GoogleMap.prototype.setMapTypeId = function (typeId) {
    };
    GoogleMap.prototype.setTilt = function (tiltLevel) {
    };
    GoogleMap.prototype.animateCamera = function (cameraPosition) {
    };
    GoogleMap.prototype.moveCamera = function (cameraPosition) {
    };
    GoogleMap.prototype.setMyLocationEnabled = function (enabled) {
    };
    GoogleMap.prototype.setIndoorEnabled = function (enabled) {
    };
    GoogleMap.prototype.setTrafficEnabled = function (enabled) {
    };
    GoogleMap.prototype.setCompassEnabled = function (enabled) {
    };
    GoogleMap.prototype.setAllGesturesEnabled = function (enabled) {
    };
    GoogleMap.prototype.addMarker = function (options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._objectInstance.addMarker(options, function (marker) {
                if (marker)
                    resolve(new GoogleMapsMarker(marker));
                else
                    reject();
            });
        });
    };
    GoogleMap.prototype.addCircle = function (options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._objectInstance.addCircle(options, function (circle) {
                if (circle)
                    resolve(new GoogleMapsCircle(circle));
                else
                    reject();
            });
        });
    };
    GoogleMap.prototype.addPolygon = function (options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._objectInstance.addPolygon(options, function (polygon) {
                if (polygon)
                    resolve(new GoogleMapsPolygon(polygon));
                else
                    reject();
            });
        });
    };
    GoogleMap.prototype.addPolyline = function (options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._objectInstance.addPolyline(options, function (polyline) {
                if (polyline)
                    resolve(new GoogleMapsPolyline(polyline));
                else
                    reject();
            });
        });
    };
    GoogleMap.prototype.addTileOverlay = function (options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._objectInstance.addTileOverlay(options, function (tileOverlay) {
                if (tileOverlay)
                    resolve(new GoogleMapsTileOverlay(tileOverlay));
                else
                    reject();
            });
        });
    };
    GoogleMap.prototype.addGroundOverlay = function (options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._objectInstance.addTileOverlay(options, function (groundOverlay) {
                if (groundOverlay)
                    resolve(new GoogleMapsGroundOverlay(groundOverlay));
                else
                    reject();
            });
        });
    };
    GoogleMap.prototype.addKmlOverlay = function (options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._objectInstance.addTileOverlay(options, function (kmlOverlay) {
                if (kmlOverlay)
                    resolve(new GoogleMapsKmlOverlay(kmlOverlay));
                else
                    reject();
            });
        });
    };
    GoogleMap.prototype.setDiv = function (domNode) {
    };
    GoogleMap.prototype.setVisible = function (visible) {
    };
    GoogleMap.prototype.setOptions = function (options) {
    };
    GoogleMap.prototype.setBackgroundColor = function (backgroundColor) {
    };
    GoogleMap.prototype.setPadding = function (top, right, bottom, left) {
    };
    GoogleMap.prototype.clear = function () {
    };
    GoogleMap.prototype.refreshLayout = function () {
    };
    GoogleMap.prototype.fromLatLngToPoint = function (latLng, point) {
        return;
    };
    GoogleMap.prototype.fromPointToLatLng = function (point, latLng) {
        return;
    };
    GoogleMap.prototype.toDataURL = function () {
        return;
    };
    GoogleMap.prototype.remove = function () {
    };
    GoogleMap.prototype.panBy = function () {
    };
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMap.prototype, "setDebuggable", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMap.prototype, "setClickable", null);
    __decorate([
        plugin_2.CordovaInstance()
    ], GoogleMap.prototype, "getCameraPosition", null);
    __decorate([
        plugin_2.CordovaInstance()
    ], GoogleMap.prototype, "getMyLocation", null);
    __decorate([
        plugin_2.CordovaInstance()
    ], GoogleMap.prototype, "getVisibleRegion", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMap.prototype, "showDialog", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMap.prototype, "closeDialog", null);
    __decorate([
        plugin_2.CordovaInstance()
    ], GoogleMap.prototype, "getLicenseInfo", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMap.prototype, "setCenter", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMap.prototype, "setZoom", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMap.prototype, "setMapTypeId", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMap.prototype, "setTilt", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMap.prototype, "animateCamera", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMap.prototype, "moveCamera", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMap.prototype, "setMyLocationEnabled", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMap.prototype, "setIndoorEnabled", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMap.prototype, "setTrafficEnabled", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMap.prototype, "setCompassEnabled", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMap.prototype, "setAllGesturesEnabled", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMap.prototype, "setDiv", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMap.prototype, "setVisible", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMap.prototype, "setOptions", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMap.prototype, "setBackgroundColor", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMap.prototype, "setPadding", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMap.prototype, "clear", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMap.prototype, "refreshLayout", null);
    __decorate([
        plugin_2.CordovaInstance()
    ], GoogleMap.prototype, "fromLatLngToPoint", null);
    __decorate([
        plugin_2.CordovaInstance()
    ], GoogleMap.prototype, "fromPointToLatLng", null);
    __decorate([
        plugin_2.CordovaInstance()
    ], GoogleMap.prototype, "toDataURL", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMap.prototype, "remove", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMap.prototype, "panBy", null);
    __decorate([
        plugin_1.Cordova()
    ], GoogleMap, "isAvailable", null);
    GoogleMap = __decorate([
        plugin_1.Plugin({
            pluginRef: 'plugin.google.maps.Map',
            plugin: 'cordova-plugin-googlemaps',
            repo: 'https://github.com/mapsplugin/cordova-plugin-googlemaps'
        })
    ], GoogleMap);
    return GoogleMap;
}());
exports.GoogleMap = GoogleMap;
var GoogleMapsMarker = (function () {
    function GoogleMapsMarker(_objectInstance) {
        this._objectInstance = _objectInstance;
    }
    GoogleMapsMarker.prototype.addEventListener = function (event) {
        var _this = this;
        return new Rx_1.Observable(function (observer) {
            _this._objectInstance.addEventListener(event, observer.next);
            return function () { return _this._objectInstance.removeEventListener(event, observer.next); };
        });
    };
    GoogleMapsMarker.prototype.isVisible = function () {
        return;
    };
    GoogleMapsMarker.prototype.setVisible = function (visible) {
    };
    GoogleMapsMarker.prototype.getHashCode = function () {
        return;
    };
    GoogleMapsMarker.prototype.remove = function () {
    };
    GoogleMapsMarker.prototype.setOpacity = function (alpha) {
    };
    GoogleMapsMarker.prototype.getOpacity = function () {
        return;
    };
    GoogleMapsMarker.prototype.setZIndex = function () {
    };
    GoogleMapsMarker.prototype.setIconAnchor = function (x, y) {
    };
    GoogleMapsMarker.prototype.setInfoWindowAnchor = function (x, y) {
    };
    GoogleMapsMarker.prototype.setDraggable = function (draggable) {
    };
    GoogleMapsMarker.prototype.isDraggable = function () {
        return;
    };
    GoogleMapsMarker.prototype.setFlat = function (flat) {
        return;
    };
    GoogleMapsMarker.prototype.setIcon = function (icon) {
    };
    GoogleMapsMarker.prototype.setTitle = function (title) {
    };
    GoogleMapsMarker.prototype.getTitle = function () {
        return;
    };
    GoogleMapsMarker.prototype.setSnippet = function (snippet) {
    };
    GoogleMapsMarker.prototype.getSnippet = function () {
        return;
    };
    GoogleMapsMarker.prototype.setRotation = function (rotation) {
    };
    GoogleMapsMarker.prototype.getRotation = function () {
        return;
    };
    GoogleMapsMarker.prototype.showInfoWindow = function () {
        return;
    };
    GoogleMapsMarker.prototype.hideInfoWindow = function () {
        return;
    };
    GoogleMapsMarker.prototype.setPosition = function (latLng) {
    };
    GoogleMapsMarker.prototype.getPosition = function () {
        return;
    };
    GoogleMapsMarker.prototype.getMap = function () {
        return;
    };
    GoogleMapsMarker.prototype.setAnimation = function (animation) {
    };
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsMarker.prototype, "isVisible", null);
    __decorate([
        plugin_2.CordovaInstance()
    ], GoogleMapsMarker.prototype, "setVisible", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsMarker.prototype, "getHashCode", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsMarker.prototype, "remove", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsMarker.prototype, "setOpacity", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsMarker.prototype, "getOpacity", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsMarker.prototype, "setZIndex", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsMarker.prototype, "setIconAnchor", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsMarker.prototype, "setInfoWindowAnchor", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsMarker.prototype, "setDraggable", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsMarker.prototype, "isDraggable", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsMarker.prototype, "setFlat", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsMarker.prototype, "setIcon", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsMarker.prototype, "setTitle", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsMarker.prototype, "getTitle", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsMarker.prototype, "setSnippet", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsMarker.prototype, "getSnippet", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsMarker.prototype, "setRotation", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsMarker.prototype, "getRotation", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsMarker.prototype, "showInfoWindow", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsMarker.prototype, "hideInfoWindow", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsMarker.prototype, "setPosition", null);
    __decorate([
        plugin_2.CordovaInstance()
    ], GoogleMapsMarker.prototype, "getPosition", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsMarker.prototype, "getMap", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsMarker.prototype, "setAnimation", null);
    return GoogleMapsMarker;
}());
exports.GoogleMapsMarker = GoogleMapsMarker;
var GoogleMapsCircle = (function () {
    function GoogleMapsCircle(_objectInstance) {
        this._objectInstance = _objectInstance;
    }
    GoogleMapsCircle.prototype.addEventListener = function (event) {
        var _this = this;
        return new Rx_1.Observable(function (observer) {
            _this._objectInstance.addEventListener(event, observer.next);
            return function () { return _this._objectInstance.removeEventListener(event, observer.next); };
        });
    };
    GoogleMapsCircle.prototype.getCenter = function () {
        return;
    };
    GoogleMapsCircle.prototype.getRadius = function () {
        return;
    };
    GoogleMapsCircle.prototype.getStrokeColor = function () {
        return;
    };
    GoogleMapsCircle.prototype.getVisible = function () {
        return;
    };
    GoogleMapsCircle.prototype.getZIndex = function () {
        return;
    };
    GoogleMapsCircle.prototype.remove = function () {
    };
    GoogleMapsCircle.prototype.setCenter = function (latLng) {
    };
    GoogleMapsCircle.prototype.setFillColor = function (fillColor) {
    };
    GoogleMapsCircle.prototype.setStrokeColor = function (strokeColor) {
    };
    GoogleMapsCircle.prototype.setStrokeWidth = function (strokeWidth) {
    };
    GoogleMapsCircle.prototype.setVisible = function (visible) {
    };
    GoogleMapsCircle.prototype.setZIndex = function (zIndex) {
    };
    GoogleMapsCircle.prototype.setRadius = function (radius) {
    };
    GoogleMapsCircle.prototype.getMap = function () {
        return;
    };
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsCircle.prototype, "getCenter", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsCircle.prototype, "getRadius", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsCircle.prototype, "getStrokeColor", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsCircle.prototype, "getVisible", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsCircle.prototype, "getZIndex", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsCircle.prototype, "remove", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsCircle.prototype, "setCenter", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsCircle.prototype, "setFillColor", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsCircle.prototype, "setStrokeColor", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsCircle.prototype, "setStrokeWidth", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsCircle.prototype, "setVisible", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsCircle.prototype, "setZIndex", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsCircle.prototype, "setRadius", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsCircle.prototype, "getMap", null);
    return GoogleMapsCircle;
}());
exports.GoogleMapsCircle = GoogleMapsCircle;
var GoogleMapsPolyline = (function () {
    function GoogleMapsPolyline(_objectInstance) {
        this._objectInstance = _objectInstance;
    }
    GoogleMapsPolyline.prototype.addEventListener = function (event) {
        var _this = this;
        return new Rx_1.Observable(function (observer) {
            _this._objectInstance.addEventListener(event, observer.next);
            return function () { return _this._objectInstance.removeEventListener(event, observer.next); };
        });
    };
    GoogleMapsPolyline.prototype.getPoints = function () {
        return;
    };
    GoogleMapsPolyline.prototype.getCOlor = function () {
        return;
    };
    GoogleMapsPolyline.prototype.getWidth = function () {
        return;
    };
    GoogleMapsPolyline.prototype.getGeodesic = function () {
        return;
    };
    GoogleMapsPolyline.prototype.getZIndex = function () {
        return;
    };
    GoogleMapsPolyline.prototype.remove = function () {
    };
    GoogleMapsPolyline.prototype.setPoints = function (points) {
    };
    GoogleMapsPolyline.prototype.setColor = function (color) {
    };
    GoogleMapsPolyline.prototype.setWidth = function (width) {
    };
    GoogleMapsPolyline.prototype.setVisible = function (visible) {
    };
    GoogleMapsPolyline.prototype.setZIndex = function (zIndex) {
    };
    GoogleMapsPolyline.prototype.setGeoDesic = function (geoDesic) {
    };
    GoogleMapsPolyline.prototype.getMap = function () {
        return;
    };
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsPolyline.prototype, "getPoints", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsPolyline.prototype, "getCOlor", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsPolyline.prototype, "getWidth", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsPolyline.prototype, "getGeodesic", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsPolyline.prototype, "getZIndex", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsPolyline.prototype, "remove", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsPolyline.prototype, "setPoints", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsPolyline.prototype, "setColor", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsPolyline.prototype, "setWidth", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsPolyline.prototype, "setVisible", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsPolyline.prototype, "setZIndex", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsPolyline.prototype, "setGeoDesic", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsPolyline.prototype, "getMap", null);
    return GoogleMapsPolyline;
}());
exports.GoogleMapsPolyline = GoogleMapsPolyline;
var GoogleMapsPolygon = (function () {
    function GoogleMapsPolygon(_objectInstance) {
        this._objectInstance = _objectInstance;
    }
    GoogleMapsPolygon.prototype.addEventListener = function (event) {
        var _this = this;
        return new Rx_1.Observable(function (observer) {
            _this._objectInstance.addEventListener(event, observer.next);
            return function () { return _this._objectInstance.removeEventListener(event, observer.next); };
        });
    };
    GoogleMapsPolygon.prototype.getPoints = function () {
        return;
    };
    GoogleMapsPolygon.prototype.getStrokeColor = function () {
        return;
    };
    GoogleMapsPolygon.prototype.getFillColor = function () {
        return;
    };
    GoogleMapsPolygon.prototype.getStrokeWidth = function () {
        return;
    };
    GoogleMapsPolygon.prototype.getGeodesic = function () {
        return;
    };
    GoogleMapsPolygon.prototype.getVisible = function () {
        return;
    };
    GoogleMapsPolygon.prototype.getZIndex = function () {
        return;
    };
    GoogleMapsPolygon.prototype.remove = function () {
    };
    GoogleMapsPolygon.prototype.setPoints = function (points) {
    };
    GoogleMapsPolygon.prototype.setStrokeColor = function (strokeColor) {
    };
    GoogleMapsPolygon.prototype.setFillColor = function (fillColor) {
    };
    GoogleMapsPolygon.prototype.setStrokeWidth = function (strokeWidth) {
    };
    GoogleMapsPolygon.prototype.setVisible = function (visible) {
    };
    GoogleMapsPolygon.prototype.setZIndex = function (zIndex) {
    };
    GoogleMapsPolygon.prototype.setGeodesic = function (geodesic) {
    };
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsPolygon.prototype, "getPoints", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsPolygon.prototype, "getStrokeColor", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsPolygon.prototype, "getFillColor", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsPolygon.prototype, "getStrokeWidth", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsPolygon.prototype, "getGeodesic", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsPolygon.prototype, "getVisible", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsPolygon.prototype, "getZIndex", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsPolygon.prototype, "remove", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsPolygon.prototype, "setPoints", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsPolygon.prototype, "setStrokeColor", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsPolygon.prototype, "setFillColor", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsPolygon.prototype, "setStrokeWidth", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsPolygon.prototype, "setVisible", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsPolygon.prototype, "setZIndex", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsPolygon.prototype, "setGeodesic", null);
    return GoogleMapsPolygon;
}());
exports.GoogleMapsPolygon = GoogleMapsPolygon;
var GoogleMapsTileOverlay = (function () {
    function GoogleMapsTileOverlay(_objectInstance) {
        this._objectInstance = _objectInstance;
    }
    GoogleMapsTileOverlay.prototype.getVisible = function () {
        return;
    };
    GoogleMapsTileOverlay.prototype.setVisible = function (visible) {
    };
    GoogleMapsTileOverlay.prototype.getFadeIn = function () {
        return;
    };
    GoogleMapsTileOverlay.prototype.setFadeIn = function (fadeIn) {
    };
    GoogleMapsTileOverlay.prototype.getZIndex = function () {
        return;
    };
    GoogleMapsTileOverlay.prototype.setZIndex = function (zIndex) {
    };
    GoogleMapsTileOverlay.prototype.getOpacity = function () {
        return;
    };
    GoogleMapsTileOverlay.prototype.setOpacity = function (opacity) {
    };
    GoogleMapsTileOverlay.prototype.clearTileCache = function () {
    };
    GoogleMapsTileOverlay.prototype.remove = function () {
    };
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsTileOverlay.prototype, "getVisible", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsTileOverlay.prototype, "setVisible", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsTileOverlay.prototype, "getFadeIn", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsTileOverlay.prototype, "setFadeIn", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsTileOverlay.prototype, "getZIndex", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsTileOverlay.prototype, "setZIndex", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsTileOverlay.prototype, "getOpacity", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsTileOverlay.prototype, "setOpacity", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsTileOverlay.prototype, "clearTileCache", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsTileOverlay.prototype, "remove", null);
    return GoogleMapsTileOverlay;
}());
exports.GoogleMapsTileOverlay = GoogleMapsTileOverlay;
var GoogleMapsGroundOverlay = (function () {
    function GoogleMapsGroundOverlay(_objectInstance) {
        this._objectInstance = _objectInstance;
    }
    GoogleMapsGroundOverlay.prototype.setBearing = function (bearing) {
    };
    GoogleMapsGroundOverlay.prototype.getBearing = function () {
        return;
    };
    GoogleMapsGroundOverlay.prototype.setOpacity = function (opacity) {
    };
    GoogleMapsGroundOverlay.prototype.getOpacity = function () {
        return;
    };
    GoogleMapsGroundOverlay.prototype.setVisible = function (visible) {
    };
    GoogleMapsGroundOverlay.prototype.getVisible = function () {
        return;
    };
    GoogleMapsGroundOverlay.prototype.setImage = function (image) {
    };
    ;
    GoogleMapsGroundOverlay.prototype.remove = function () {
    };
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsGroundOverlay.prototype, "setBearing", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsGroundOverlay.prototype, "getBearing", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsGroundOverlay.prototype, "setOpacity", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsGroundOverlay.prototype, "getOpacity", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsGroundOverlay.prototype, "setVisible", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsGroundOverlay.prototype, "getVisible", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsGroundOverlay.prototype, "setImage", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsGroundOverlay.prototype, "remove", null);
    return GoogleMapsGroundOverlay;
}());
exports.GoogleMapsGroundOverlay = GoogleMapsGroundOverlay;
var GoogleMapsKmlOverlay = (function () {
    function GoogleMapsKmlOverlay(_objectInstance) {
        this._objectInstance = _objectInstance;
    }
    GoogleMapsKmlOverlay.prototype.remove = function () {
    };
    GoogleMapsKmlOverlay.prototype.getOverlays = function () {
        return;
    };
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsKmlOverlay.prototype, "remove", null);
    __decorate([
        plugin_2.CordovaInstance({ sync: true })
    ], GoogleMapsKmlOverlay.prototype, "getOverlays", null);
    return GoogleMapsKmlOverlay;
}());
exports.GoogleMapsKmlOverlay = GoogleMapsKmlOverlay;
var GoogleMapsLatLng = (function () {
    function GoogleMapsLatLng(lat, lng) {
        this.lat = lat;
        this.lng = lng;
        this._objectInstance = new plugin.google.maps.LatLng(lat, lng);
    }
    GoogleMapsLatLng.prototype.equals = function (other) {
        return;
    };
    GoogleMapsLatLng.prototype.toString = function () {
        return;
    };
    GoogleMapsLatLng.prototype.toUrlValue = function (precision) {
        return;
    };
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsLatLng.prototype, "equals", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsLatLng.prototype, "toString", null);
    __decorate([
        plugin_2.CordovaInstance({
            sync: true
        })
    ], GoogleMapsLatLng.prototype, "toUrlValue", null);
    return GoogleMapsLatLng;
}());
exports.GoogleMapsLatLng = GoogleMapsLatLng;
//# sourceMappingURL=googlemaps.js.map